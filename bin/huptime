#!/usr/bin/env python
#
# Copyright 2013 Adin Scannell <adin@scannell.ca>, all rights reserved.
#
# This file is part of Huptime.
#
# Huptime is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Huptime is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Huptime.  If not, see <http://www.gnu.org/licenses/>.
#

import os
import sys
import signal
import re
import copy
import time

REALPATH = os.path.realpath(sys.argv[0])
BINDIR = os.path.dirname(REALPATH)
BASEDIR = os.path.dirname(BINDIR)
LIBDIR = os.path.join(BASEDIR, "lib", "huptime")
SOFILE = os.path.join(LIBDIR, "huptime.so")

# Defaults.
STATUS = False
RESTART = False
STOP = False

HUPTIME_MODE = "fork"
HUPTIME_MULTI = False
HUPTIME_REVIVE = False
HUPTIME_UNLINK = ""
HUPTIME_DEBUG = False

MULTI_COUNT = 1
MULTI_PIDS = []

STOP_TIMEOUT = 10.0

def usage():
    print "usage: huptime [options] [--] <command...>"
    print "  or   huptime [options] [--] --status <command...>"
    print "  or   huptime [options] [--] --restart <command...>"
    print "  or   huptime [options] [--] --stop <command...>"
    print "  or   huptime --help"
    print
    print "where options are:"
    print
    print "   --fork                Run using fork mode (exclusive of --exec)."
    print "   --exec                Run using exec mode (exclusive of --fork)."
    print "   --revive              Restart the process on exit."
    print "   --multi=<N>           Run N processes (and wait for exit)."
    print "                         This will enable SO_REUSEPORT (needs Linux 3.9+)."
    print "   --unlink=<file>       Unlink the given file on restart."
    print "                         This is useful for pid files."
    print "   --debug               Print debug output to stderr."
    print "   --timeout=<T>         Timeout between TERM and KILL for --stop."
    print "                         The default is %2.2f seconds." % STOP_TIMEOUT
    print
    print "Huptime is distributed in the hope that it will be useful,"
    print "but WITHOUT ANY WARRANTY; without even the implied warranty of"
    print "MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the"
    print "GNU General Public License for more details."

def debug(msg):
    if HUPTIME_DEBUG:
        print "huptime %d: %s" % (os.getpid(), msg)

# Parse all options.
ARGS = sys.argv[1:]

while len(ARGS) > 0: 

    arg = ARGS[0]

    if arg.startswith("--"):
        if "=" in arg:
            arg, value = arg[2:].split("=", 1)
        else:
            arg, value = arg[2:], None

        if not arg:
            break
        elif arg == "exec" and not value:
            HUPTIME_MODE = "exec"
        elif arg == "fork" and not value:
            HUPTIME_MODE = "fork"
        elif arg == "multi" and value:
            HUPTIME_MULTI = True
            MULTI_COUNT = value
        elif arg == "timeout" and value:
            STOP_TIMEOUT = value
        elif arg == "revive" and not value:
            HUPTIME_REVIVE = True
        elif arg == "debug" and not value:
            HUPTIME_DEBUG = True
        elif arg == "unlink" and value:
            HUPTIME_UNLINK = value
        elif arg == "help" and not value:
            usage()
            sys.exit(0)
        elif arg == "status" and not value:
            STATUS = True
        elif arg == "restart" and not value:
            RESTART = True
        elif arg == "stop" and not value:
            STOP = True
        else:
            usage()
            sys.exit(1)
    else:
        # Non-option.
        break

    # Move to the next option.
    ARGS.pop(0)

if len(ARGS) == 0:
    usage()
    sys.exit(0)

try:
    MULTI_COUNT = int(MULTI_COUNT)
    if MULTI_COUNT <= 0:
        raise ValueError()
except ValueError:
    print "Invalid value for --multi (should be positive integer)."
    sys.exit(1)

try:
    STOP_TIMEOUT = float(STOP_TIMEOUT)
    if STOP_TIMEOUT < 0.0:
        raise ValueError()
except ValueError:
    print "Invalid value for --timeout (should be non-negative)."
    sys.exit(1)

if STATUS or RESTART or STOP:

    # Check that the user hasn't passed any
    # options which we could consider invalid.
    if len([x for x in (STATUS, RESTART, STOP) if x]) > 1:
        print "Invalid options: can't specify multi of --status, --restart and --stop."
        sys.exit(1)

    # Go through /proc/*/cmdline and find matches.
    # NOTE: Some interpretors may fudge the command
    # line, so we may it against argv[0:] or argv[1:].
    exact_matches = []
    inter_matches = []

    for pid in os.listdir("/proc"):
        try:
            pid = int(pid)
            if pid == os.getpid():
                continue

            cmd = open("/proc/%d/cmdline" % pid, 'r').read().split("\0")

            # An exact match.
            if len(cmd) >= len(ARGS) and cmd[:len(ARGS)] == ARGS:
                exact_matches.append(pid)

            # Interpreter match.
            elif (len(cmd) >= 1+len(ARGS) and cmd[1:1+len(ARGS)] == ARGS) or \
                 (len(cmd) >= 2+len(ARGS) and cmd[2:2+len(ARGS)] == ARGS):
                inter_matches.append(pid)
        except KeyboardInterrupt:
            sys.exit(1)
        except:
            continue

    if exact_matches:
        debug("Found exact processes: %s" % exact_matches)
    if inter_matches:
        debug("Found interpreter processes: %s" % inter_matches)

    # Kill the preferred process group in order
    # to do the restart. We grab the pids to block
    # until the restart is complete below.
    active_pids = []
    if exact_matches:
        active_pids = exact_matches
    elif inter_matches:
        active_pids = inter_matches
    else:
        print "No process found?"
        sys.exit(1)

    for pid in active_pids:
        try:
            if STATUS:
                print pid
            elif RESTART:
                debug("Restarting PID %d..." % pid)
                os.kill(pid, signal.SIGHUP)
            elif STOP:
                debug("Killing PID %d (TERM)..." % pid)
                os.kill(pid, signal.SIGTERM)
        except OSError:
            continue

    # Nothing more to do.
    if STATUS:
        sys.exit(0)

    # Block until the SIGHUP signal has been
    # unmasked from this PID, or it no longer
    # exists. When the SIGHUP signal is unmasked,
    # know that the restart has been processed.
    for pid in active_pids:
        start_time = time.time()
        while True:
            try:
                data = open("/proc/%d/status" % pid, 'r').read().split("\n")
                if RESTART:
                    is_restarted = False
                    for line in data:
                        m = re.match("SigBlk:\s*([0-9a-f]+)", line)
                        if m:
                            # SIGHUP happens to be 1. So if
                            # this is not blocked, the number
                            # will be even. Once the signal is
                            # not blocked, we know it's done.
                            if int(m.group(1), 16) % 2 == 0:
                                is_restarted = True
                                break
                    if is_restarted:
                        break
                elif STOP:
                    now = time.time()
                    if now - start_time > STOP_TIMEOUT:
                        debug("Killing PID %d (KILL)..." % pid)
                        os.kill(pid, signal.SIGKILL)
                        start_time = now
            except KeyboardInterrupt:
                sys.exit(1)
            except:
                break
        debug("Restart complete for PID %d." % pid)

else:
    debug("Mode is %s." % HUPTIME_MODE)
    debug("Unlink is %s." % HUPTIME_UNLINK)
    debug("Multi is %s." % HUPTIME_MULTI)
    debug("Revive is %s." % HUPTIME_REVIVE)

    ENV = copy.copy(os.environ)
    ENV["LD_PRELOAD"] = SOFILE
    ENV["HUPTIME_DEBUG"] = str(HUPTIME_DEBUG).lower()
    ENV["HUPTIME_MODE"] = HUPTIME_MODE
    ENV["HUPTIME_UNLINK"] = HUPTIME_UNLINK
    ENV["HUPTIME_MULTI"] = str(HUPTIME_MULTI).lower()
    ENV["HUPTIME_REVIVE"] = str(HUPTIME_REVIVE).lower()

    if MULTI_COUNT == 1:
        # Execute our new process.
        os.execvpe(ARGS[0], ARGS, ENV)
        sys.exit(1)

    else:
        # Execute many processes.
        # NOTE: In this case, to ensure that
        # this can cleanly be used from supervisors
        # and init scripts, we wait for the children
        # to complete.
        child_pids = []
        for _ in range(MULTI_COUNT):
            pid = os.fork()
            if pid == 0:
                os.execvpe(ARGS[0], ARGS, ENV)
                sys.exit(1)
            else:
                child_pids.append(pid)

        for pid in child_pids:
            os.waitpid(pid, 0)
